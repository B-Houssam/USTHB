SET SERVEROUTPUT ON;
------- Question 1--------------
--------------------------------
CREATE OR REPLACE TRIGGER ins_inf
AFTER INSERT 
ON INFIRMIER
FOR EACH ROW
BEGIN
	DBMS_OUTPUT.PUT_LINE('Un nouveau employé de type infirmier est ajoute');
END;

INSERT INTO EMPLOYE VALUES (69,'B','N','D','666');
INSERT INTO INFIRMIER VALUES (69,'CAR','NUIT',15000);
--------------------------------
CREATE OR REPLACE TRIGGER upd_inf
AFTER UPDATE 
ON INFIRMIER
FOR EACH ROW
BEGIN
	DBMS_OUTPUT.PUT_LINE('Un nouveau employe de type infirmier est modifie');
END;

UPDATE INFIRMIER SET SALAIRE=14000 WHERE NUM_INF=69;
--------------------------------
CREATE OR REPLACE TRIGGER del_inf
AFTER DELETE 
ON INFIRMIER
FOR EACH ROW
BEGIN
	DBMS_OUTPUT.PUT_LINE('Un nouveau employe de type infirmier est supprime');
END;

DELETE FROM INFIRMIER WHERE NUM_INF=69;
--------------------------------
CREATE OR REPLACE TRIGGER MAJ
AFTER INSERT OR UPDATE OR DELETE
ON INFIRMIER
FOR EACH ROW
BEGIN
	IF (INSERTING) THEN
		DBMS_OUTPUT.PUT_LINE('Un nouveau employé de type infirmier est ajoute');
	END IF;
	IF (UPDATING) THEN
		DBMS_OUTPUT.PUT_LINE('Un nouveau employe de type infirmier est modifie');
	END IF;
	IF (DELETING) THEN
		DBMS_OUTPUT.PUT_LINE('Un nouveau employe de type infirmier est supprime');
	END IF;
END;

------- Question 2--------------
CREATE OR REPLACE TRIGGER Aff_inf
AFTER INSERT
ON INFIRMIER
FOR EACH ROW
DECLARE nom VARCHAR2(30);
BEGIN
	SELECT NOM_SERVICE INTO nom FROM SERVICE WHERE CODE_SERVICE=:new.CODE_SERVICE;
	DBMS_OUTPUT.PUT_LINE('Un nouveau infirmier est affecte au service '||nom);
END;

INSERT INTO INFIRMIER VALUES (69,'CAR','NUIT',15000);

------- Question 3--------------
CREATE OR REPLACE TRIGGER upd_ser_inf
BEFORE UPDATE OF CODE_SERVICE
ON INFIRMIER
FOR EACH ROW
DECLARE code INFIRMIER.CODE_SERVICE%TYPE;
BEGIN
	SELECT CODE_SERVICE INTO code FROM SERVICE WHERE CODE_SERVICE = :new.CODE_SERVICE;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20005,'ERREUR FATAL CODE SERVICE NON EXISTANT');
END;

UPDATE INFIRMIER SET CODE_SERVICE='XXX' WHERE NUM_INF=69;

------- Question 4--------------
CREATE OR REPLACE TRIGGER upd_sal
BEFORE UPDATE OF SALAIRE
ON INFIRMIER
FOR EACH ROW
BEGIN
	IF (:new.SALAIRE < :old.SALAIRE) THEN
		RAISE_APPLICATION_ERROR(-20006,'NOUVEAU SALAIRE NE PEUT PAS ETRE INFIRIEUR A L''ANCIEN');
	END IF;
END;

UPDATE INFIRMIER SET SALAIRE=13000 WHERE NUM_INF=69;

------- Question 5--------------
ALTER TABLE SERVICE ADD total_salaire FLOAT DEFAULT 0;
UPDATE SERVICE x SET total_salaire = (SELECT SUM(SALAIRE)
	FROM INFIRMIER y WHERE x.CODE_SERVICE=y.CODE_SERVICE);
SELECT CODE_SERVICE, total_salaire FROM SERVICE;

CREATE OR REPLACE TRIGGER TotalSalaire_Service_trigger
AFTER INSERT ON INFIRMIER
FOR EACH ROW
BEGIN
	UPDATE SERVICE SET total_salaire = total_salaire+:new.SALAIRE
		WHERE CODE_SERVICE=:new.CODE_SERVICE;
END;

CREATE OR REPLACE TRIGGER TotalSalaireUpdate_trigger
AFTER UPDATE OF SALAIRE ON INFIRMIER
FOR EACH ROW
BEGIN
	UPDATE SERVICE SET 
		total_salaire = total_salaire-:old.SALAIRE+:new.SALAIRE
		WHERE CODE_SERVICE=:new.CODE_SERVICE;
END;

------- Question 6--------------
CREATE OR REPLACE TRIGGER TotalSalaireServices
AFTER UPDATE OF CODE_SERVICE ON INFIRMIER
FOR EACH ROW
BEGIN
	UPDATE SERVICE SET
		total_salaire = total_salaire - :old.SALAIRE
		WHERE CODE_SERVICE=:old.CODE_SERVICE;
	UPDATE SERVICE SET
		total_salaire = total_salaire + :new.SALAIRE
		WHERE CODE_SERVICE=:new.CODE_SERVICE;
END;

------- Question 7--------------
CREATE TABLE Hist_Hospit(
	date_hospit DATE,
	num_patient NUMBER(3),
	code_service VARCHAR2(3),
	CONSTRAINT pk_hist PRIMARY KEY (date_hospit,num_patient,code_service),
	CONSTRAINT fk_numHos FOREIGN KEY (num_patient) REFERENCES PATIENT(NUM_PATIENT),
	CONSTRAINT fk_codeHos FOREIGN KEY (code_service) REFERENCES SERVICE(CODE_SERVICE)
);

CREATE OR REPLACE TRIGGER hospit
AFTER INSERT ON HOSPITALISATION
FOR EACH ROW
BEGIN
	INSERT INTO Hist_Hospit VALUE(sysdate,:new.NUM_PATIENT,:new.CODE_SERVICE);
END;